# Quick script to convert 6x4 fixed width font into binary file.
# (c) 2025 Honza Sk√Ωpala
# WTFPL license applies
# Code inspired by 5x8 font converter by Tony DiCola, https://github.com/adafruit/micropython-adafruit-bitmap-font/blob/master/font_to_bin.py
# Glyphs inspired by 4x6 font by fiftyclick, https://fontstruct.com/fontstructions/show/1650758/4x6-font

FONT = bytes((
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x3F, 0x3F, 0x3F,
    0b00000000, 0b00000000, 0b00000000, 0b00000000, # #32 SPACE
    0b00000000, 0b00000000, 0b00101111, 0b00000000, # #33 !
    0b00000000, 0b00000011, 0b00000000, 0b00000011, # #34 "
    0b00010010, 0b00111111, 0b00111111, 0b00010010, # #35 #
    0b00010110, 0b00111111, 0b00101010, 0b00011000, # #36 $
    0b00000000, 0b00110001, 0b00001100, 0b00100011, # #37 %
    0b00011010, 0b00101101, 0b00011001, 0b00100100, # #38 &
    0b00000000, 0b00000000, 0b00000011, 0b00000000, # #39 '
    0b00000000, 0b00011110, 0b00100001, 0b00000000, # #40 (
    0b00000000, 0b00100001, 0b00011110, 0b00000000, # #41 )
    0b00000000, 0b00001010, 0b00000100, 0b00001010, # #42 *
    0b00000000, 0b00001000, 0b00011100, 0b00001000, # #43 +
    0b00000000, 0b00100000, 0b00010000, 0b00000000, # #44 ,
    0b00000000, 0b00001000, 0b00001000, 0b00001000, # #43 -
    0b00000000, 0b00000000, 0b00100000, 0b00000000, # #46 .
    0b00000000, 0b00110000, 0b00001100, 0b00000011, # #47 /
    0b00011110, 0b00100001, 0b00100001, 0b00011110, # #48 0
    0b00000000, 0b00100010, 0b00111111, 0b00100000, # #49 1
    0b00100010, 0b00110001, 0b00101001, 0b00100110, # #50 2
    0b00010010, 0b00100001, 0b00100101, 0b00011010, # #51 3
    0b00000111, 0b00000100, 0b00000100, 0b00111111, # #52 4
    0b00100111, 0b00100101, 0b00100101, 0b00011001, # #53 5
    0b00011110, 0b00100101, 0b00100101, 0b00011001, # #54 6
    0b00000001, 0b00000001, 0b00000001, 0b00111111, # #55 7
    0b00011010, 0b00100101, 0b00100101, 0b00011010, # #56 8
    0b00000010, 0b00000101, 0b00000101, 0b00111110, # #57 9
    0b00000000, 0b00000000, 0b00010100, 0b00000000, # #58 :
    0b00000000, 0b00000000, 0b00110100, 0b00000000, # #59 ;
    0b00000000, 0b00001000, 0b00010100, 0b00100010, # #60 <
    0b00001010, 0b00001010, 0b00001010, 0b00001010, # #61 =
    0b00100010, 0b00010100, 0b00001000, 0b00000000, # #62 >
    0b00000010, 0b00000001, 0b00101101, 0b00000010, # #63 ?
    0b00011110, 0b00100001, 0b00101101, 0b00001111, # #64 @
    0b00111110, 0b00001001, 0b00001001, 0b00111110, # #65 A
    0b00111111, 0b00100101, 0b00100101, 0b00011010, # #66 B
    0b00011110, 0b00100001, 0b00100001, 0b00010010, # #67 C
    0b00111111, 0b00100001, 0b00100001, 0b00011110, # #68 D
    0b00111111, 0b00100101, 0b00100101, 0b00100001, # #69 E
    0b00111111, 0b00000101, 0b00000101, 0b00000001, # #70 F
    0b00011110, 0b00100001, 0b00101001, 0b00011010, # #71 G
    0b00111111, 0b00000100, 0b00000100, 0b00111111, # #72 H
    0b00000000, 0b00100001, 0b00111111, 0b00100001, # #73 I
    0b00010000, 0b00100000, 0b00100001, 0b00011111, # #74 J
    0b00111111, 0b00001100, 0b00010010, 0b00100001, # #75 K
    0b00111111, 0b00100000, 0b00100000, 0b00100000, # #76 L
    0b00111111, 0b00000110, 0b00000110, 0b00111111, # #77 M
    0b00111111, 0b00000110, 0b00011000, 0b00111111, # #78 N
    0b00011110, 0b00100001, 0b00100001, 0b00011110, # #79 O
    0b00111111, 0b00001001, 0b00001001, 0b00000110, # #80 P
    0b00001110, 0b00010001, 0b00010001, 0b00101110, # #81 Q
    0b00111111, 0b00001001, 0b00011001, 0b00100110, # #82 R
    0b00010010, 0b00100101, 0b00101001, 0b00010010, # #83 S
    0b00000001, 0b00000001, 0b00111111, 0b00000001, # #84 T
    0b00011111, 0b00100000, 0b00100000, 0b00011111, # #85 U
    0b00001111, 0b00110000, 0b00110000, 0b00001111, # #86 V
    0b00111111, 0b00011000, 0b00011000, 0b00111111, # #87 W
    0b00110011, 0b00001100, 0b00001100, 0b00110011, # #88 X
    0b00000000, 0b00000111, 0b00111000, 0b00000111, # #89 Y
    0b00000000, 0b00110001, 0b00101101, 0b00100011, # #90 Z
    0b00000000, 0b00111111, 0b00100001, 0b00000000, # #91 [
    0b00000000, 0b00000011, 0b00001100, 0b00110000, # #92 \
    0b00000000, 0b00100001, 0b00111111, 0b00000000, # #93 ]
    0b00000000, 0b00000010, 0b00000001, 0b00000010, # #94 ^
    0b00100000, 0b00100000, 0b00100000, 0b00100000, # #95 _
    0b00000000, 0b00000001, 0b00000010, 0b00000000, # #96 `
    0b00011010, 0b00101010, 0b00101010, 0b00111100, # #97 a
    0b00111111, 0b00100100, 0b00100100, 0b00011000, # #98 b
    0b00011100, 0b00100010, 0b00100010, 0b00010100, # #99 c
    0b00011000, 0b00100100, 0b00100100, 0b00111111, # #100 d
    0b00011100, 0b00101010, 0b00101010, 0b00000100, # #101 e
    0b00000100, 0b00111110, 0b00000101, 0b00000001, # #102 f
    0b00100100, 0b00101010, 0b00101010, 0b00011110, # #103 g
    0b00111111, 0b00000100, 0b00000100, 0b00111000, # #104 h
    0b00000000, 0b00000000, 0b00111101, 0b00000000, # #105 i
    0b00000000, 0b00010000, 0b00100000, 0b00011101, # #106 j
    0b00000000, 0b00111111, 0b00001000, 0b00110100, # #107 k
    0b00000000, 0b00011111, 0b00100000, 0b00000000, # #108 l
    0b00111110, 0b00001100, 0b00001100, 0b00111110, # #109 m
    0b00111110, 0b00000010, 0b00000010, 0b00111100, # #110 n
    0b00011100, 0b00100010, 0b00100010, 0b00011100, # #111 o
    0b00111110, 0b00010010, 0b00010010, 0b00001100, # #112 p
    0b00001100, 0b00010010, 0b00010010, 0b00111110, # #113 q
    0b00111110, 0b00000100, 0b00000010, 0b00000110, # #114 r
    0b00100100, 0b00101010, 0b00101010, 0b00010010, # #115 s
    0b00000000, 0b00011111, 0b00100100, 0b00100100, # #116 t
    0b00011110, 0b00100000, 0b00100000, 0b00111110, # #117 u
    0b00111110, 0b00010000, 0b00010000, 0b00001110, # #118 v
    0b00111110, 0b00011000, 0b00011000, 0b00111110, # #119 w
    0b00000000, 0b00110110, 0b00001000, 0b00110110, # #120 x
    0b00000000, 0b00001110, 0b00111000, 0b00001110, # #121 y
    0b00000000, 0b00110010, 0b00101010, 0b00100110, # #122 z
    0b00000100, 0b00000100, 0b00111011, 0b00100001, # #123 {
    0b00000000, 0b00000000, 0b00111111, 0b00000000, # #124 |
    0b00100001, 0b00111011, 0b00000100, 0b00000100, # #125 }
    0b00000100, 0b00000010, 0b00000100, 0b00000010, # #126 ~
    0b00111111, 0b00100101, 0b00101011, 0b00111111, # #127 DEL
))

def print_glyph(char_index, font=FONT, width=4, height=6):
    offset = char_index * width
    columns = font[offset:offset + width]
    for row in range(height):
        line = ''
        for col in columns:
            bit = (col >> row) & 1
            line += 'X' if bit else ' '
        print(line)

import os

if __name__ == '__main__':
    with open(f"{os.path.splitext(os.path.basename(__file__))[0]}.bin", 'wb') as outfile:
        # Write a byte each for the character width, character height.
        outfile.write(bytes((4, 6)))
        # Now write all of the font character bytes.
        for font_byte in FONT:
            outfile.write(font_byte.to_bytes(1, 'big'))
